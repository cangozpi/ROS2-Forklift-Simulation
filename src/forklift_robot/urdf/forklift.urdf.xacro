<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="forklift_bot">
    
    <xacro:property name="height_of_chassis_from_ground_plane" value="0.122" />

    <xacro:property name="chassis_bottom_width" value="1.115" />
    <xacro:property name="chassis_bottom_length" value="1.59" />
    <xacro:property name="chassis_bottom_height" value="0.23" />

    <xacro:property name="chassis_top_width" value="1.115" />
    <xacro:property name="chassis_top_length" value="1.59" />
    <xacro:property name="chassis_top_height" value="1.808" />

    <xacro:property name="back_wheel_radius" value="0.05" />
    <xacro:property name="back_wheel_mass" value="0.1" />
    <xacro:property name="back_wheel_length_offset" value="${(chassis_bottom_length / 2)  * (2/3)}" />

    <xacro:property name="front_wheel_radius" value="0.05" />
    <xacro:property name="front_wheel_thickness" value="0.04" />
    <xacro:property name="front_wheel_mass" value="0.1" />
    <xacro:property name="front_wheel_length_offset" value="${(chassis_bottom_length / 2)}" />

    <xacro:property name="lift_body_connector_length" value="0.15" />
    <xacro:property name="lift_base_length" value="0.25" />
    <xacro:property name="lift_base_height" value="3.2" />


    <xacro:property name="lift_body_connector_length" value="0.15" />
    <xacro:property name="lift_body_connector_height" value="0.505" />

    <xacro:property name="fork_base_width" value="1.050" />
    <xacro:property name="fork_base_length" value="0.035" />
    <xacro:property name="fork_base_height" value="1.220" />
    <xacro:property name="fork_base_height_offset" value="${height_of_chassis_from_ground_plane - 0.076}" />

    <xacro:property name="fork_length" value="0.99" />
    <xacro:property name="fork_width" value="0.1" />
    <xacro:property name="fork_height" value="0.045" />
    <xacro:property name="fork_separation" value="0.850" /> <!-- separation (distance) between right fork and left fork -->

    <xacro:property name="laser_frame_radius" value="0.05" /> 
    <xacro:property name="laser_frame_length" value="0.04" /> 
    <xacro:property name="laser_frame_mass" value="0.01" /> 

    <xacro:property name="camera_size_x" value="0.010" /> 
    <xacro:property name="camera_size_y" value="0.03" /> 
    <xacro:property name="camera_size_z" value="0.03" /> 

    <xacro:property name="camera_image_width" value="640" />  <!-- Width of the RGB image published by the camera sensor -->
    <xacro:property name="camera_image_height" value="480" /> <!-- Height of the RGB image published by the camera sensor -->
    <xacro:property name="camera_image_clip_near" value="0.05" /> <!-- how close the camera can see -->
    <xacro:property name="camera_image_clip_far" value="8" /> <!-- how far the camera can see -->

    <xacro:property name="collision_detection_plugin_update_rate" value="30.0" />

    <xacro:include filename="inertial_macros.xacro"/>
    <xacro:include filename="gazebo_colors.xacro"/>
    <!-- <xacro:include filename="lidar.xacro"/> -->
    <!-- <xacro:include filename="camera.xacro"/> --> <!-- Uncomment this line, and comment the line below to switch between Depth Camera and a Regular Camera -->
    <xacro:include filename="depth_camera.xacro"/>



        <!-- BASE LINK -->

    <link name="base_link">
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </link>


    <!-- CHASSIS LINK -->

    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis_bottom_link"/>
        <origin xyz="-0.1 0 0"/>
    </joint>

    <link name="chassis_bottom_link">
        <visual>
            <origin xyz="0 0 ${chassis_bottom_height / 2}" rpy="0 0 0"/>
            <geometry>
                <box size="${chassis_bottom_length} ${chassis_bottom_width} ${chassis_bottom_height}" />
            </geometry>
            <material name="green">
                <color rgba="0.2 1 0.2 1"/>
            </material>
        </visual>
        <collision name="chassis_bottom_link_collision">
            <origin xyz="0 0 ${chassis_bottom_height / 2}" rpy="0 0 0"/>
            <geometry>
                <box size="${chassis_bottom_length} ${chassis_bottom_width} ${chassis_bottom_height}" />
            </geometry>
        </collision>
        <xacro:inertial_box mass="30" x="${chassis_bottom_length}" y="${chassis_bottom_width}" z="${chassis_bottom_height}">
            <origin xyz="0 0 ${chassis_bottom_height / 2}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <gazebo reference="chassis_bottom_link">
        <material>Gazebo/White</material>
    </gazebo>
    

    <joint name="chassis_top_joint" type="fixed">
        <origin xyz="0 0 ${chassis_bottom_height}" rpy="0 0 0"/>
        <parent link="chassis_bottom_link"/>
        <child link="chassis_top_link"/>        
    </joint>

    <link name="chassis_top_link">
        <visual>
            <origin xyz="0 0 ${chassis_top_height / 2}" rpy="0 0 0"/>
            <geometry>
                <box size="${chassis_top_length} ${chassis_top_width} ${chassis_top_height}" />
            </geometry>
            <material name="red">
                <color rgba="1 0 0 1"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 ${chassis_top_height / 2}" rpy="0 0 0"/>
            <geometry>
                <box size="${chassis_top_length} ${chassis_top_width} ${chassis_top_height}" />
            </geometry>
        </collision>
        <xacro:inertial_box mass="5" x="${chassis_top_length}" y="${chassis_top_width}" z="${chassis_top_height}">
            <origin xyz="0 0 ${chassis_top_height / 2}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>


    <!-- LEFT WHEEL LINK -->

    <joint name="left_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="left_wheel"/>
        <!-- <origin xyz="0 0.175 0" rpy="-${pi/2} 0 0" /> -->
        <origin xyz="${front_wheel_length_offset} ${(chassis_bottom_width / 2)} 0" rpy="-${pi/2} 0 0" />
        <axis xyz="0 0 1"/>
    </joint>

    <link name="left_wheel">
        <visual>
            <geometry>
                <cylinder radius="${front_wheel_radius}" length="${front_wheel_thickness}"/>
            </geometry>
            <material name="blue"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${front_wheel_radius}" length="${front_wheel_thickness}"/>
            </geometry>
        </collision>
        <xacro:inertial_cylinder mass="${front_wheel_mass}" length="${front_wheel_thickness}" radius="${front_wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>

    <gazebo reference="left_wheel">
        <material>Gazebo/Blue</material>
    </gazebo>




    <!-- RIGHT FRONT WHEEL LINK -->

    <joint name="right_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="right_wheel"/>
        <!-- <origin xyz="0 -0.175 0" rpy="${pi/2} 0 0" /> -->
        <origin xyz="${front_wheel_length_offset} -${(chassis_bottom_width / 2)} 0" rpy="${pi/2} 0 0" />
        <axis xyz="0 0 -1"/>
    </joint>

    <link name="right_wheel">
        <visual>
            <geometry>
                <cylinder radius="${front_wheel_radius}" length="${front_wheel_thickness}"/>
            </geometry>
            <material name="blue"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${front_wheel_radius}" length="${front_wheel_thickness}"/>
            </geometry>
        </collision>
        <xacro:inertial_cylinder mass="${front_wheel_mass}" length="${front_wheel_thickness}" radius="${front_wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>

    <gazebo reference="right_wheel">
        <material>Gazebo/Blue</material>
    </gazebo>


    <!-- CASTER WHEEL LINK -->

    <joint name="caster_wheel_joint" type="fixed">
        <parent link="chassis_bottom_link"/>
        <child link="caster_wheel"/>
        <origin xyz="-${back_wheel_length_offset} 0 0" />
    </joint>


    <link name="caster_wheel">
        <visual>
            <geometry>
                <sphere radius="${back_wheel_radius}"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${back_wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:inertial_sphere mass="${back_wheel_mass}" radius="${back_wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_sphere>
    </link>

    
    <!-- FRICTION VALUES -->
    <gazebo reference="caster_wheel">
        <material>Gazebo/Black</material>
        <mu1 value="0.001"/>
        <mu2 value="0.001"/>
    </gazebo>


    <gazebo reference="right_wheel">
        <material>Gazebo/Black</material>
        <mu1 value="10.0"/>
        <mu2 value="10.0"/>
    </gazebo>

    <gazebo reference="left_wheel">
        <material>Gazebo/Black</material>
        <mu1 value="10.0"/>
        <mu2 value="10.0"/>
    </gazebo>


     <!-- LIFT BASE LINK-->
    <link name="lift_base_link">
        <visual>
            <origin xyz="0 0 ${lift_base_height / 2}" rpy="0 0 0"/>
            <geometry>
                <box size="${lift_base_length} ${chassis_bottom_width} ${lift_base_height}"/>
            </geometry>
            <material name="red">
                <color rgba="1 0 0 1"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 ${lift_base_height / 2}" rpy="0 0 0"/>
            <geometry>
                <box size="${lift_base_length} ${chassis_bottom_width} ${lift_base_height}"/>
            </geometry>
            <!-- Added by me (surface tag) to prevent fork falling down issue -->
            <!-- <surface>
                <friction>
                    <ode>
                        <mu>100000.0</mu> 
                        <mu2>100000.0</mu2>
                    </ode>
                </friction>
                <contact>
                    <ode>
                        <min_depth>0.003</min_depth>
                    </ode>
                </contact>
            </surface> -->
        </collision>
        <xacro:inertial_box mass="${0.001}" x="${lift_base_length}" y="${chassis_bottom_width}" z="${lift_base_height}" >
            <origin xyz="0 0 ${lift_base_height / 2}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <joint name="lift_base_joint" type="fixed">
        <parent link="chassis_bottom_link"/>
        <child link="lift_base_link"/>
        <origin xyz="${(chassis_bottom_length / 2) + lift_body_connector_length + (lift_base_length / 2)} 0 0" rpy="0 0 0" />
    </joint>


    <!-- LIFT BODY CONNECTOR LINK -->
    <link name="lift_body_connector_link">
        <visual>
            <origin xyz="0 0 ${(lift_body_connector_height / 2)}" rpy="0 0 0"/>
            <geometry>
                <box size="${lift_body_connector_length} ${chassis_bottom_width} ${lift_body_connector_height}"/>
            </geometry>
            <material name="blue">
                <color rgba="0 0 1 1"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 ${(lift_body_connector_height / 2)}" rpy="0 0 0"/>
            <geometry>
                <box size="${lift_body_connector_length} ${chassis_bottom_width} ${lift_body_connector_height}"/>
            </geometry>
        </collision>
        <xacro:inertial_box mass="${0.001}" x="${lift_body_connector_length}" y="${chassis_bottom_width}" z="${lift_body_connector_height}" > 
            <origin xyz="0 0 ${(lift_body_connector_height / 2)}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <joint name="lift_body_connector_joint" type="fixed">
        <parent link="chassis_bottom_link"/>
        <child link="lift_body_connector_link"/>
        <origin xyz="${(chassis_bottom_length / 2) + (lift_body_connector_length / 2)} 0 0" rpy="0 0 0" />
    </joint>


    <!-- FORK BASE LINK -->
    <link name="fork_base_link">
        <visual>
            <origin xyz="0 0 ${(fork_base_height / 2)}" rpy="0 0 0"/>
            <geometry>
                <box size="${fork_base_length} ${fork_base_width} ${fork_base_height}"/>
            </geometry>
            <material name="green">
                <color rgba="0 1 0 1"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 ${(fork_base_height / 2)}" rpy="0 0 0"/>
            <geometry>
                <box size="${fork_base_length} ${fork_base_width} ${fork_base_height}"/>
            </geometry>
            <!-- Added by me (surface tag) to prevent fork falling down issue -->
            <!-- <surface>
                <friction>
                    <ode>
                        <mu>100000.0</mu> 
                        <mu2>100000.0</mu2>
                    </ode>
                </friction>
                <contact>
                    <ode>
                        <min_depth>0.003</min_depth>
                    </ode>
                </contact>
            </surface> -->
        </collision>
        <xacro:inertial_box mass="0.001" x="${fork_base_length}" y="${fork_base_width}" z="${fork_base_height}" > 
            <origin xyz="0 0 ${(fork_base_height / 2)}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <joint name="fork_base_joint" type="prismatic">
        <parent link="lift_base_link"/>
        <child link="fork_base_link"/>
        <axis xyz="0 0 1"/>
        <limit lower=" -${height_of_chassis_from_ground_plane - 0.015}" upper="${lift_base_height + fork_base_height_offset}" velocity="0.5" effort="1000.0"/> <!-- TODO: set limits -->
        <origin xyz="${(lift_base_length / 2) + (fork_base_length / 2)} 0 -${fork_base_height_offset}" rpy="0 0 0"/>
    </joint>
    


    <!-- RIGHT FORK LINK -->
    <link name="right_fork_link">
        <visual>
            <origin xyz="0 0 ${(fork_height / 2)}" rpy="0 0 0"/>
            <geometry>
                <box size="${fork_length} ${fork_width} ${fork_height}"/>
            </geometry>
            <material name="red">
                <color rgba="1 0 0 1"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 ${(fork_height / 2)}" rpy="0 0 0"/>
            <geometry>
                <box size="${fork_length} ${fork_width} ${fork_height}"/>
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.001" x="${fork_length}" y="${fork_width}" z="${fork_height}" >
            <origin xyz="0 0 ${(fork_height / 2)}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <joint name="right_fork_joint" type="fixed">
        <parent link="fork_base_link"/>
        <child link="right_fork_link"/>
        <origin xyz="${(fork_base_length / 2) + (fork_length / 2)} ${(fork_separation / 2) + (fork_width / 2)} 0" rpy="0 0 0"/>
    </joint>



    <!-- LEFT FORK LINK -->
    <link name="left_fork_link">
        <visual>
            <origin xyz="0 0 ${(fork_height / 2)}" rpy="0 0 0"/>
            <geometry>
                <box size="${fork_length} ${fork_width} ${fork_height}"/>
            </geometry>
            <material name="red">
                <color rgba="1 0 0 1"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 ${(fork_height / 2)}" rpy="0 0 0"/>
            <geometry>
                <box size="${fork_length} ${fork_width} ${fork_height}"/>
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.001" x="${fork_length}" y="${fork_width}" z="${fork_height}" > 
            <origin xyz="0 0 ${(fork_height / 2)}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <joint name="left_fork_joint" type="fixed">
        <parent link="fork_base_link"/>
        <child link="left_fork_link"/>
        <origin xyz="${(fork_base_length / 2) + (fork_length / 2)} -${(fork_separation / 2) + (fork_width / 2)} 0" rpy="0 0 0"/>
    </joint>


    
    
    <!-- Setup ROS_CONTROL and transmission tags for the forklift robot-->
    <xacro:include filename="ros2_control.xacro"/>
    <xacro:include filename="gazebo.xacro"/>

    <!-- Setup Collision Detection Plugin for the forklift robot -->
    <xacro:include filename="ros_gazebo_collision_detection_plugin.xacro"/>
    
    <!-- Setup Gazebo Gravity Compensation Plugin for the forklift robot -->
    <!-- <xacro:include filename="gazebo_gravity_compensation_plugin.xacro"/> -->
    

</robot>